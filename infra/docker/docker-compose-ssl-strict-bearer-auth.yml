# docker-compose for kafka broker with ssl enabled, strict ssl check and oauth-bearer authentication

### Make sure to set the following variable in .env or as environment variable
#HOST_NAME=kafka.kcmeu.duckdns.org

## Example client configuration(eg: client-ssl-strict.properties) to connect to kafka broker.
#security.protocol=SSL
#ssl.truststore.location=/path-to/client.truststore.p12
#ssl.truststore.password=your-truststore-pwd
#ssl.keystore.location=/path-to/client.keystore.p12
#ssl.keystore.password=your-keystore-pwd

version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181

  kafka:
    image: confluentinc/cp-kafka:7.7.1
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 9093:9093
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://:9092,SASL_SSL://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,SASL_SSL://${HOST_NAME}:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,SASL_SSL:SASL_SSL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      ### Debug options ###
      #KAFKA_OPTS: "-Djavax.net.debug=ssl:handshake" #to show SSL handshake info in log
      KAFKA_LOG4J_LOGGERS: "org.apache.kafka.common.security.oauthbearer=DEBUG,org.apache.kafka.common.network.SaslChannelBuilder=DEBUG,org.apache.kafka.common.security.authenticator=DEBUG,org.apache.kafka.common.security.auth=DEBUG"

      ### SSL config ###
      KAFKA_SSL_KEYSTORE_FILENAME: broker.keystore.p12
      KAFKA_SSL_KEYSTORE_TYPE: PKCS12
      KAFKA_SSL_KEYSTORE_CREDENTIALS: keystore_pwd1.txt
      KAFKA_SSL_KEY_CREDENTIALS: keystore_pwd1.txt
      KAFKA_SSL_TRUSTSTORE_FILENAME: broker.truststore.p12
      KAFKA_SSL_TRUSTSTORE_TYPE: PKCS12
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: truststore_pwd1.txt
      KAFKA_SSL_CLIENT_AUTH: 'required' #if its set 'required', then client's needs valid certificate to connect this broker
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
      ## SEEMS REDUNDANT - if not set, inter broker communication is failing
      #KAFKA_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/broker.keystore.p12
      #KAFKA_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/broker.truststore.p12

      ### Enable SASL and OAUTHBEARER for the SASL_SSL listener ###
      KAFKA_SASL_ENABLED_MECHANISMS: OAUTHBEARER
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_LISTENER_NAME_SASL_SSL_SASL_ENABLED_MECHANISMS: OAUTHBEARER
      KAFKA_LISTENER_NAME_SASL_SSL_SASL_OAUTHBEARER_JWKS_ENDPOINT_URL: http://zitadel.dev.local/oauth/v2/keys
      KAFKA_LISTENER_NAME_SASL_SSL_OAUTHBEARER_SASL_SERVER_CALLBACK_HANDLER_CLASS: org.apache.kafka.common.security.oauthbearer.OAuthBearerValidatorCallbackHandler
      KAFKA_LISTENER_NAME_SASL_SSL_SASL_OAUTHBEARER_EXPECTED_AUDIENCE: 287639842542584140
      ZOOKEEPER_SASL_ENABLED: "false"
      KAFKA_OPTS:
        -Djava.security.auth.login.config=/etc/kafka/sasl/kafka_server_jaas.conf
      #KAFKA_LISTENER_NAME_SASL_SSL_OAUTHBEARER_SASL_JAAS_CONFIG: "org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required;"
      ## JWKS URL for JWT validation (use 'http://<keycloak-host>/realms/<your-realm>/protocol/openid-connect/certs' for keycloak )
      #KAFKA_SASL_OAUTHBEARER_JWKS_ENDPOINT_URL: http://zitadel.dev.local/oauth/v2/keys
      ## Valid issuer and audience for the JWT tokens
      #KAFKA_SASL_OAUTHBEARER_EXPECTED_AUDIENCE: 287639842542584140 # the bearer token is checked for claim aud="kafka-client"
      #KAFKA_SASL_OAUTHBEARER_SCOPE_CLAIM: scope # Specify the claim that contains the scopes in the token.
      #KAFKA_SASL_OAUTHBEARER_SCOPE_CLAIM_NAME: "email profile" # verify scope claim value
      #KAFKA_SASL_OAUTHBEARER_VALID_ISSUER_URI: http://zitadel.dev.local

    volumes:
      - ./docker_volume/kafka/ssl_secrets:/etc/kafka/secrets:ro  # Ensure this points to the directory with your keystore and truststore
      - ./docker_volume/kafka/sasl:/etc/kafka/sasl:ro

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: PLAINTEXT