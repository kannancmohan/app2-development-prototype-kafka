---
spring:
  kafka:
    bootstrap-servers: kafka.kcmeu.duckdns.org:9093
    security.protocol: "SASL_SSL"
    ssl:
#      trust-store-location: classpath:/client-certs/app-truststore.p12
#      trust-store-password: "${KAFKA_TRUSTSTORE_PASSWORD:your-truststore-pwd}"
      key-store-location: classpath:/client-certs/app-keystore.p12
      key-store-password: "${KAFKA_KEYSTORE_PASSWORD:your-keystore-pwd}"
    properties:
      security.protocol: SASL_SSL
      sasl.mechanism: OAUTHBEARER
      sasl.jaas.config: >
        org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required 
        clientId="${OAUTH2_CLIENT_ID}" clientSecret="${OAUTH2_CLIENT_PWD}" 
        tokenEndpoint="${OAUTH2_TOKEN_ENDPOINT}" 
        scope="${OAUTH2_CLIENT_SCOPE}";
      sasl.login.callback.handler.class: "org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginCallbackHandler"
      sasl.oauthbearer.token.endpoint.url: "${OAUTH2_TOKEN_ENDPOINT}"
management:
  tracing:
    enabled: true
    sampling:
      probability: 1.0
  otlp:
    tracing:
      endpoint: http://tempo.tempo.svc.cluster.local:4318/v1/traces #tempo grpc endpoint
    metrics:
      export:
        enabled: false # disabling exporting of metrics
  observations:
    key-values:
      application: ${spring.application.name}
# custom properties
consumers:
  string_consumer:
    groupId: app2.development.prototype.kafka-prod-kafka-consumer-group_1
  batch_string_consumer:
    groupId: app2.development.prototype.kafka-prod-kafka-consumer-group_2
  message_consumer:
    groupId: app2.development.prototype.kafka-prod-kafka-consumer-group_3